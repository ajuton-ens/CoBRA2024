import cv2
import numpy as np
from apriltag import apriltag
from picamera2 import Picamera2
import time

cap = cv2.VideoCapture(0)
Pos_tags_sol = [{'id':0,'centre':[0,0,0], }, {'id':1,'centre':[1,0,0] }, {'id':2,'centre':[0,1,0] }, {'id':3,'centre':[1,1,0] },{'id':4,'centre':[0,2,0] }]
a = 17.4 # longueur/largeur des tags utlisés
for tag in Pos_tags_sol: # création des points aux coins 
    tag['lb-rb-rt-lt'] = [[tag['centre'][0]-a/2,tag['centre'][1]-a/2,tag['centre'][2]],[tag['centre'][0]+a/2,tag['centre'][1]-a/2,tag['centre'][2]],[tag['centre'][0]-a/2,tag['centre'][1]+a/2,tag['centre'][2]],[tag['centre'][0]+a/2,tag['centre'][1]+a/2,tag['centre'][2]]]
camera_mat = np.array([[2541,0,1692],[0,2542,1315],[0,0,1]])
coef_dist = np.array([[7.343*10**(-3),1.236,-1.877*10**(-3),6.804*10**(-3)]])

picam2 = Picamera2()
HEIGH,WIDTH=3280,2464 #résolution de la caméra
picam2.configure(picam2.create_preview_configuration({'size':(WIDTH,HEIGH)}))
picam2.start()

"""
def photo_g():
    ret, photo = cap.read()
    if not ret:
        return("Caméra non détéctée!!")
    return cv2.cvtColor(photo, cv2.COLOR_BGR2GRAY)
"""
def detection_tag(photo, famille = "tag36h11"):
    """ Cette fonction renvoie (si les tags sont detectés) une liste de dictionnaires chaque 
        dictionnaire correspond à un tag.
        Les clé du dictionnaire qui vont nous intéresser sont:
        - id : identifiant du tag
        -center : les coordonnées en pixel du centre du tag
          """
    detector = apriltag(famille)
    detections = detector.detect(photo)
    if len(detections) == 0:
        return "Aucun tag n'est detecté"
    return detections

def position_camera(photo,Pos_tags_sol,camera_mat,coef_dist,famille = "tag36h11"):
    """
    Cette fonction renvoie les coordonnées de la caméra 
    par rappot au sol
    """
    tags =  detection_tag(photo,famille)
    if tags == "Aucun tag n'est detecté":
        return "position impossible à trouver, car aucun tag n'est detecté"
    Pos_r = []
    Pos_im = []
    if len(tags) >0:
        for tag in tags:
            id = tag['id']
            for d in Pos_tags_sol:
                if id == d['id']:
                    Pos_r.append(d['centre'])
                    Pos_im.append(tag['center'])
                    for i in range(4):
                         Pos_r.append(d['lb-rb-rt-lt'][i])
                         Pos_im.append(tag['lb-rb-rt-lt'][i])
                    
        Pos_r = np.array(Pos_r)
        Pos_im = np.array(Pos_im)
        Pos_r = Pos_r.astype(np.float32)
        Pos_im = Pos_im.astype(np.float32)
        v, r, T = cv2.solvePnP(Pos_r, Pos_im, camera_mat, coef_dist)
        R,_ = cv2.Rodrigues(r)
        Rt = np.transpose(R)
        Pos_cam = -np.dot(Rt, T)
        return Pos_cam
    return ("nobre insuffisant de tags")
        
    

while True:
    photo = cv2.cvtColor(picam2.capture_array(),cv2.COLOR_BGR2GRAY)
    
    print(position_camera(photo,Pos_tags_sol,camera_mat,coef_dist))
    time.sleep(1)
