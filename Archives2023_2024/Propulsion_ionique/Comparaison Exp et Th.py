import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
##Experimentale
##Exp1
D1= [30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0]
U1= [9.0, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0, 16.5, 16.9]
I1= [0.036, 0.069, 0.105, 0.16, 0.187, 0.224, 0.263, 0.324, 0.37, 0.42, 0.48, 0.53, 0.615, 3.5, 3.8, 4.0]
P1= [0.324, 0.69, 1.1025, 1.76, 2.1505, 2.688, 3.2875, 4.212, 4.995, 5.88, 6.96, 7.95, 9.5325, 56.0, 62.7, 67.6]
M1= [199.02, 198.74, 198.61, 198.36, 198.2, 197.95, 197.69, 197.42, 197.23, 196.89, 196.6, 196.35, 196.0, 195.59, 194.6, 194.05]
mN_W1= [11.5055555555554, 9.38347826086952, 7.02938775510197, 5.79681818181814, 5.47407579632651, 5.29185267857149, 5.10269201520915, 4.61153846153851, 4.26180180180183, 4.18760204081636, 3.94655172413795, 3.76358490566039, 3.49897718332023, 0.667430357142858, 0.751004784688997, 0.776383136094674]
F1= [3.72779999999996, 6.47459999999997, 7.74989999999992, 10.2023999999999, 11.7720000000002, 14.2245000000002, 16.7751000000001, 19.4238000000002, 21.2877000000002, 24.6231000000002, 27.4680000000001, 29.9205000000001, 33.3540000000001, 37.3761, 47.0880000000001, 52.4835]

U1=np.array(U1)*10**3
D1=np.array(D1)*10**-3
I1=np.array(I1)*10**-3
##Exp 2
# D2= [30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0]

U2= [10.5, 11.0, 12.0, 13.0, 12.5, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0, 16.5, 17.0, 17.1, 17.5, 18.0, 18.5, 19.0, 19.5, 19.72]
D2=[20 for i in range(len(U2))]
I2= [0.2, 0.228, 0.315, 0.416, 0.366, 0.48, 0.535, 0.605, 0.665, 0.745, 0.8245, 0.935, 1.12, 1.13, 1.24, 1.465, 1.615, 2.125, 2.685, 2.947]
P2= [2.1, 2.508, 3.78, 5.408, 4.575, 6.48, 7.49, 8.7725, 9.975, 11.5475, 13.192, 15.4275, 19.04, 19.323, 21.7, 26.37, 29.8775, 40.375, 52.3575, 58.11484]
M2= [195.55, 195.23, 194.5, 193.7, 194.16, 193.25, 192.8, 192.3, 191.9, 191.3, 190.7, 190.1, 189.5, 189.3, 188.8, 188.3, 187.6, 186.7, 186.1, 185.6]
mN_W2= [6.68014285714276, 6.8450956937799, 6.43619047619045, 5.94985207100592, 6.04681967213113, 5.64680555555554, 5.47473965287047, 5.23349102308348, 4.99596992481201, 4.82535613769212, 4.67001212856277, 4.37483714146816, 3.85392857142857, 3.8990218910107, 3.69796313364054, 3.22907849829351, 3.0798359969877, 2.49775356037152, 2.03853889127632, 1.92098610268909]
F2= [14.0282999999998, 17.1675, 24.3287999999999, 32.1768, 27.6641999999999, 36.5912999999999, 41.0057999999998, 45.9107999999998, 49.8347999999998, 55.7207999999998, 61.6068, 67.4928, 73.3787999999999, 75.3407999999998, 80.2457999999998, 85.1507999999998, 92.0178, 100.8468, 106.7328, 111.6378]

U2=np.array(U2)*10**3
D2=np.array(D2)*10**-3
I2=np.array(I2)*10**-3
##Exp 3
D3= [23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0]
U3= [6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0]
I3= [0.026, 0.055, 0.096, 0.145, 0.202, 0.273, 0.342, 0.414, 0.503, 0.595, 0.69, 0.802, 0.92, 1.045, 1.202, 1.4, 1.75, 2.85]
P3= [0.169, 0.385, 0.72, 1.16, 1.717, 2.457, 3.249, 4.14, 5.2815, 6.545, 7.935, 9.624, 11.5, 13.585, 16.227, 19.6, 25.375, 42.75]
M3= [197.14, 196.95, 196.69, 196.35, 195.99, 195.57, 195.15, 194.7, 194.15, 193.65, 193.0, 192.4, 191.7, 191.1, 190.3, 189.7, 188.7, 187.5]
mN_W3= [7.54615384615523, 8.15376623376679, 7.90250000000017, 7.78034482758634, 7.3132207338381, 6.78754578754586, 6.40110803324101, 6.0897826086957, 5.79517182618575, 5.42585179526357, 5.27897920604916, 4.96412094763093, 4.75145217391306, 4.45548030916453, 4.21369938990571, 3.78886224489797, 3.31317044334976, 2.24195789473685]
F3= [1.27530000000023, 3.13920000000021, 5.68980000000012, 9.02520000000016, 12.5568, 16.6770000000002, 20.7972, 25.2117000000002, 30.6072, 35.5122000000001, 41.8887000000001, 47.7747, 54.6417000000002, 60.5277000000002, 68.3757, 74.2617000000002, 84.0717000000002, 95.8437000000001]

U3=np.array(U3)*10**3
D3=np.array(D3)*10**-3
I3=np.array(I3)*10**-3
##Exp 4
D4= [16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0]
U4= [5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5]
I4= [0.032, 0.108, 0.223, 0.364, 0.528, 0.712, 0.93, 1.17, 1.437, 1.736]
P4= [0.16, 0.594, 1.338, 2.366, 3.696, 5.34, 7.44, 9.945, 12.933, 16.492]
M4= [197.17, 196.91, 196.52, 196.05, 195.5, 194.8, 194.1, 193.4, 192.5, 191.5]
mN_W4= [5.51812500000021, 5.78030303030294, 5.42556053811645, 5.01694843617912, 4.67142857142855, 4.51921348314603, 4.1666129032258, 3.80760180995474, 3.61057759220598, 3.42624302692214]
F4= [0.882900000000034, 3.43349999999994, 7.25939999999981, 11.8700999999998, 17.2655999999999, 24.1325999999998, 30.9996, 37.8665999999999, 46.6955999999999, 56.5055999999999]
U4=np.array(U4)*10**3
D4=np.array(D4)*10**-3
I4=np.array(I4)*10**-3
##Exp 5
D5= [45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0]
U5= [10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5, 15.0, 15.5, 16.0, 16.5, 17.0, 17.5, 18.0, 18.5, 19.0]
I5= [0.03, 0.04, 0.053, 0.07, 0.091, 0.109, 0.125, 0.148, 0.17, 0.195, 0.235, 0.245, 0.28, 0.32, 0.345, 0.38, 0.425, 0.445]
P5= [0.315, 0.44, 0.6095, 0.84, 1.1375, 1.417, 1.6875, 2.072, 2.465, 2.925, 3.6425, 3.92, 4.62, 5.44, 6.0375, 6.84, 7.8625, 8.455]
M5= [197.13, 197.02, 196.91, 196.78, 196.64, 196.48, 196.31, 196.14, 195.95, 195.76, 195.55, 195.35, 195.1, 194.84, 194.6, 194.4, 194.1, 193.85]
mN_W5= [4.36000000000046, 5.57386363636364, 5.79425758818726, 5.72250000000011, 5.43323076923098, 5.46923076923091, 5.58080000000005, 5.35004826254838, 5.2532251521299, 5.06430769230776, 4.63231297185998, 4.80489795918371, 4.60772727272731, 4.38204044117648, 4.33833540372673, 4.11618421052632, 3.95519236883945, 3.96808988764047]
F5= [1.37340000000015, 2.4525, 3.53160000000013, 4.80690000000009, 6.18030000000023, 7.7499000000002, 9.41760000000008, 11.0853000000002, 12.9492000000002, 14.8131000000002, 16.8732, 18.8352000000002, 21.2877000000002, 23.8383000000001, 26.1927000000002, 28.1547, 31.0977000000002, 33.5502000000002]

U5=np.array(U5)*10**3
D5=np.array(D5)*10**-3
I5=np.array(I5)*10**-3

Dexp=[D1,D2,D3,D4,D5]
Uexp=[U1,U2,U3,U4,U5]
Iexp=[I1,I2,I3,I4,I5]
Pexp=[P1,P2,P3,P4,P5]
Mexp=[M1,M2,M3,M4,M5]
mN_Wexp=[mN_W1,mN_W2,mN_W3,mN_W4,mN_W5]
Fexp=[F1,F2,F3,F4,F5]
##Modèle  théorique
R_petit = 20 * 10**-6  # rayon fil
R_grand = 6 * 10**-3  # Rayon tube
eps0 = 8.85 * 10**(-12)
d = np.linspace(10**-2, 3*10**-2, 10)  # distance entre electrode
E_seuil = 3.4 * 10**6  # V/m

Cd = 1  # coef trainé
mub = 2 * 10**-4  # mobilité ion
I = 1 * 10**-3
V = np.linspace(0, 20 * 10**3, 100)
phi0 = 6 * 10**3
beta = 1

cte = I * Cd / mub
FD = np.zeros((len(V), len(d)))
FEHD = np.zeros((len(V), len(d)))
S_grand = np.pi * R_grand**2

# def Modele_3D():
#     # Initia
#     for j in range(len(V)):
#         for i in range(len(d)):
#             lc = 10 + (d[i] - 10) * beta
#             FD[j, i] = cte * S_grand * d[i]
#             FEHD[j, i] = (9 * eps0 * d[i] * (V[j] - phi0)**2) / (8 * lc**2)

def Modele_2D(D,beta):
    FEHD2=[]
    FD2=[]
    for i in range(len(V)):
        lc = 10 + (D - 10) * beta
        FD2.append( cte * S_grand * D)
        FEHD2.append((9 * eps0 * D * (V[i] - phi0)**2) / (8 * lc**2))
    T=[]
    for i in range(len(FD2)):
        T.append(FEHD2[i] - FD2[i])

    ind=T.index(min(T))
    Thrust=[]
    for i in range(len(T)):
        if i<=ind:
            Thrust.append(0)
        else:
            Thrust.append(T[i])
    return(np.array(Thrust))

Legend=[]
def ploting(Di,Ui,Fi,beta):
    Fth=Modele_2D(Di[0],beta)*10**3
    plt.plot(Ui,Fi,marker='o')
    plt.plot(V,Fth)
    Legend.append('Expérimentale d ={} mm'.format(Di[0]*10**3))
    Legend.append('théorique d ={} mm'.format(Di[0]*10**3))

# Détermination béta (même si beta a priori cte)
indice=1
def fit_function(U, beta, D):
    lc = 10 + (D - 10) * beta
    FD_fit = cte * S_grand * D
    FEHD_fit = (9 * eps0 * D * (U - phi0)**2) / (8 * lc**2)
    T_fit = (FEHD_fit - FD_fit)
    T=[]

    for i in range(len(T_fit)):
        T.append(T_fit[i])
    mini=T.index(min(T))
    Th=[]
    for i in range(len(T)):
        if i<mini:
            Th.append(0)
        else:
            Th.append(T[i])
    return Th

# Ajustement de la fonction aux données expérimentales
initial_guess = [1.0]  # Valeur initiale pour beta
BETA = []
Legend=[]
def wrapped_fit_function(U, beta):
    return fit_function(U, beta, Dexp[i][0])

for i in range(len(Uexp)):
    popt, pcov = curve_fit(wrapped_fit_function, Uexp[i], Fexp[i], p0=initial_guess, method='dogbox', bounds=(0, np.inf))
    BETA.append(popt[0])
    plt.plot(Uexp[i], Fexp[i], marker='o')
    plt.plot(V, fit_function(V, *popt, Dexp[i][0]))
    Legend.append('Expérimentale d = {} mm'.format(Dexp[i][0]*10**3))
    Legend.append('Théorique d = {} mm (beta = {:.4f})'.format((Dexp[i][0]*10**3),popt[0]))

plt.xlabel('Tension en V')
plt.ylabel('Force en N')
plt.legend(Legend)
plt.title('Force (N) en fonction de la tension (V)')
plt.grid(alpha=0.5)
plt.ylim(-1,120)
plt.show()

